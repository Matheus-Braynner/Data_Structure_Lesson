package Entities;

import java.util.Stack;

public class Valid {

		public static boolean is_valid(String expression) {
	        boolean result = true;
	        Stack<Integer> st1 = new Stack<Integer>();
	        Stack<Character> st2 = new Stack<Character>();
	        boolean isTrue = true;
	        for (int i = 0; i < expression.length(); i++) {
	            char temp = expression.charAt(i);
	            /*if the character is a digit, we push it to st1*/
	            if (isDigit(temp)) {
	                st1.push(temp - '0');
	                if(isTrue) {
	                    isTrue = false;
	                }
	                else {
	                    return false;
	                }
	            } 
	            else if (isOperator(temp)) {
	                st2.push(temp);
	                isTrue = true;
	            } 
	            else {
	                if(isBracketOpen(temp)) {
	                    st2.push(temp);
	                } 
	                else {
	                    boolean flag = true;
	                    while (!st2.isEmpty()) {
	                        char c = st2.pop();
	                        if (c == getCorrespondingChar(temp)) {
	                            flag = false;
	                            break;
	                        } 
	                        else {
	                            if (st1.size() < 2) {
	                                return false;
	                            }
	                            else {
	                                st1.pop();
	                            }
	                        }
	                    }
	                    if (flag) {
	                        return false;
	                    }

	                }
	            }
	        }
	        while (!st2.isEmpty()) {
	            char c = st2.pop();
	            if (!isOperator(c)) {
	                return false;
	            }
	            if (st1.size() < 2) {
	                return false;
	            }
	            else {
	                st1.pop();
	            }
	        }
	        if (st1.size() > 1 || !st2.isEmpty()) {
	            return false;
	        }
	        return result;
	    }
	    public static char getCorrespondingChar(char c) {
	        if (c == ')') {
	            return '(';
	        }
	        else if (c == ']') {
	            return '[';
	        }
	        return '{';
	    }

	    public static boolean isBracketOpen(char c) {
	        if (c == '(' || c == '[' || c == '{') {
	            return true;
	        }
	        return false;
	    }

	    public static boolean isDigit(char c) {
	        if (c >= '0' && c <= '9') {
	            return true;
	        }
	        return false;
	    }

	    public static boolean isOperator(char c) {
	        if (c == '+' || c == '-' || c == '*') {
	            return true;
	        }
	        return false;
	    }
}
